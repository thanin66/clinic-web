{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Dashboard\", -1 /* CACHED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.appointments, appt => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: appt.id\n    }, _toDisplayString(appt.date) + \" - \" + _toDisplayString(appt.description), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","appointments","appt","key","id","date","_toDisplayString","description"],"sources":["D:\\webapp\\project\\clinic-frontend\\src\\views\\DashboardPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Dashboard</h1>\r\n    <ul>\r\n      <li v-for=\"appt in appointments\" :key=\"appt.id\">\r\n        {{ appt.date }} - {{ appt.description }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api\";\r\n\r\nexport default {\r\n  name: \"DashboardPage\",\r\n  data() {\r\n    return {\r\n      appointments: [],\r\n    };\r\n  },\r\n  async mounted() {\r\n    try {\r\n      const response = await api.get(\"/appointments\");\r\n      this.appointments = response.data;\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch appointments\", err);\r\n    }\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;uBACEA,mBAAA,CAOM,c,0BANJC,mBAAA,CAAkB,YAAd,WAAS,qBACbA,mBAAA,CAIK,c,kBAHHD,mBAAA,CAEKE,SAAA,QAAAC,WAAA,CAFcC,KAAA,CAAAC,YAAY,EAApBC,IAAI;yBAAfN,mBAAA,CAEK;MAF6BO,GAAG,EAAED,IAAI,CAACE;wBACvCF,IAAI,CAACG,IAAI,IAAG,KAAG,GAAAC,gBAAA,CAAGJ,IAAI,CAACK,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}